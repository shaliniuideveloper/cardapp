{"version":3,"sources":["img/tile.jpg","img/logo.png","logo.svg","components/CardComponent/CardComponent.style.jsx","components/CardComponent/CardComponent.jsx","components/MainContainer/MainContainer.style.jsx","components/MainContainer/MainContainer.jsx","routes.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Container","styled","Box","_templateObject","ImageBox","div","_templateObject2","Para","_templateObject3","CardComponent","_ref","msgText","react_default","a","createElement","react","width","dist","w","flexDirection","src","Tile","style","backgroundImage","Logo","defaultProps","Flex","MainContainer_style_templateObject","MainContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","console","log","MainContainer_style_Container","flex","m","components_CardComponent_CardComponent","Component","Routes","react_router_dom","react_router","exact","path","component","App","routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qvBCGjC,IAAMC,EAAYC,kBAAOC,MAAPD,CAAHE,KAOTC,EAAUH,UAAOI,IAATC,KAYRC,EAAON,UAAOF,EAAVS,uCChBXC,EAAgB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OAEdC,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACAH,EAAAC,EAAAC,cAACd,EAAD,CAAWgB,MAAO,CAAC,EAAG,GAAK,MAC3BJ,EAAAC,EAAAC,cAACG,EAAA,KAAD,CAAMC,EAAG,EAAGC,cAAc,SAASpB,EAAG,GACtCa,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,MACVT,EAAAC,EAAAC,cAACG,EAAA,KAAD,CAAMC,EAAG,EAAGC,cAAc,OAC1BP,EAAAC,EAAAC,cAACV,EAAD,CAAUkB,MAAO,CAACC,gBAAgB,OAASC,IAAO,MAClDZ,EAAAC,EAAAC,cAACP,EAAD,KAAOI,SAqBfF,EAAcgB,aAAc,CACxBd,QAAQ,IAEGF,8FCnCR,IAAMT,EAAYC,kBAAOyB,OAAPzB,CAAH0B,KC+BPC,cA7BX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACT1B,QAAU,iBAHAmB,oFAOdQ,QAAQC,IAAI,gHAQZ,OACI3B,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACQH,EAAAC,EAAAC,cAAC0B,EAAD,KACA5B,EAAAC,EAAAC,cAACG,EAAA,KAAD,CAAME,cAAe,SAAUsB,KAAM,EAAGC,EAAG,GACvC9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAehC,QAASsB,KAAKI,MAAM1B,oBApB/BiC,aCKbC,EALD,kBACVjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACIlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtB,MCO1BuB,mLANX,OACCvC,EAAAC,EAAAC,cAACsC,EAAD,aAHaR,aCOES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e22e7cb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tile.25b4e634.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.2a3f011a.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport {Flex,Box} from \"@rebass/grid\";\r\nimport styled,{css} from \"styled-components\";\r\nexport const Container = styled(Box)`\r\nwidth:320px;\r\nmin-height:200px;\r\nbackground:purple;\r\nposition:relative;\r\n\r\n`;\r\nexport const ImageBox =styled.div`\r\nwidth:245px;\r\nheight:50px;\r\nbackground:black;\r\nposition:absolute;\r\ntop:307px;\r\nopacity: 0.5;\r\nbackground-size: contain;\r\nbackground-repeat:no-repeat ;\r\n\r\n`;\r\n\r\nexport const Para = styled.p`\r\nmargin-top:7px;\r\nmargin-left:72px;\r\ncolor:white;\r\nfont-weight:600;\r\nfont-size:20px;\r\n`;\r\n","import React,{Fragment} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {Flex, Box} from \"@rebass/grid\";\r\nimport {Container,ImageBox,Para} from \"./CardComponent.style\";\r\nimport Tile from \"../../img/tile.jpg\"; \r\nimport Logo from \"../../img/logo.png\"; \r\nconst CardComponent = ({msgText})=>(\r\n    \r\n        <Fragment>\r\n        <Container width={[1, 1/2, 1/4]}>\r\n        <Flex w={1} flexDirection=\"column\" p={1}>\r\n        <img src={Tile}></img>\r\n        <Flex w={1} flexDirection=\"row\">\r\n        <ImageBox style={{backgroundImage:\"url(\" + Logo + \")\"}}>\r\n        <Para>{msgText}</Para>\r\n        </ImageBox>\r\n            \r\n        </Flex>\r\n        </Flex>\r\n        \r\n        \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n        \r\n        </Container>\r\n        </Fragment>\r\n    \r\n);\r\nCardComponent.propTypes ={\r\n    msgText :PropTypes.string.isRequired\r\n};\r\nCardComponent.defaultProps ={\r\n    msgText:\"\"\r\n};\r\nexport default CardComponent;","import {Flex,Box} from \"@rebass/grid\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = styled(Flex)`\r\nalign:center;\r\n`;\r\n","import React,{Fragment,Component} from \"react\";\r\nimport {Flex, Box} from \"@rebass/grid\";\r\nimport {CardComponent} from \"../CardComponent\";\r\nimport {Container} from \"./MainContainer.style\";\r\nclass MainContainer extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            msgText : \"Home and Away\"\r\n        }\r\n    }\r\n    componentWillMount(){\r\n        console.log(\"Inside MainContainer willMount\");\r\n    \r\n    }\r\n    componentDidMount(){\r\n        //Initial fetch from server to be done here\r\n    \r\n    }\r\n    render(){\r\n        return(\r\n            <Fragment>\r\n                    <Container>\r\n                    <Flex flexDirection={'column'} flex={1} m={3}>\r\n                        <CardComponent msgText={this.state.msgText}></CardComponent>\r\n                    </Flex>\r\n                    </Container>\r\n                \r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nexport default MainContainer;","import React from \"react\";\r\nimport {HashRouter as Router,Route} from \"react-router-dom\";\r\nimport {MainContainer} from \"./components/MainContainer\";\r\n\r\nconst Routes =() =>(\r\n    <Router>\r\n        <Route exact path=\"/\" component={MainContainer} />\r\n    </Router>\r\n);\r\nexport default Routes;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Routes from \"./routes\";\n\nclass App extends Component {\n  render() {\n    return (\n     <Routes />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}